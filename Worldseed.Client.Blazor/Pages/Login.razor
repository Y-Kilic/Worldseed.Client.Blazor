@using Worldseed.Client.Blazor.DTOs;
@using global::FluentValidation
@using BlazorStrap.Extensions.FluentValidation
@inject HttpClient httpClient
@inject IJSRuntime iJSRuntime
@using System.Text.Json
@using System.Net.Http.Headers
@inject NavigationManager nav
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IBlazorStrap blazorStrap


@page "/login"
<PageTitle>Login</PageTitle>


<p>Login to WorldSeed</p>
<BSForm Model="accountLoginRequestDTO" OnValidSubmit="SubmitLogin">
    <FluentValidator TValidator="AccountLoginRequestDTOValidator" />

    <h3>Email</h3>
    <div>
        <ValidationMessage For="@(() => accountLoginRequestDTO.Email)" />
        <BSInput InputType="InputType.Email" placeholder="Email" @bind-Value="accountLoginRequestDTO.Email" MarginBottom="Margins.Medium" />
    </div>
    <h3>Password</h3>
    <div>
        <ValidationMessage For="@(() => accountLoginRequestDTO.Password)" />
        <BSInput InputType="InputType.Password" placeholder="Password" @bind-Value="accountLoginRequestDTO.Password" MarginBottom="Margins.Medium" />
    </div>

    <p><BSButton IsSubmit="true" Color="BSColor.Primary">Login</BSButton></p>

</BSForm>

<BSModal DataId="modalLoginFailed">
    <Header>Error</Header>
    <Content>Login failed :(</Content>
        <Footer Context="modal">
            <BSButton MarginStart="Margins.Auto" Color="BSColor.Secondary" @onclick="modal.HideAsync">Close</BSButton>
        </Footer>
</BSModal>


@code 
{
    private AccountLoginRequestDTO accountLoginRequestDTO = new AccountLoginRequestDTO();

    public class AccountLoginRequestDTOValidator : AbstractValidator<AccountLoginRequestDTO>
    {
        public AccountLoginRequestDTOValidator()
        {
            RuleFor(loginAccountDTO => loginAccountDTO.Email).NotEmpty().EmailAddress();
            RuleFor(loginAccountDTO => loginAccountDTO.Password).NotEmpty();
        }
    }

    private async Task SubmitLogin()
    {
        using (var response = await httpClient.PostAsJsonAsync<AccountLoginRequestDTO>("https://worldseedapi20220930160640.azurewebsites.net/api/Auth/login", accountLoginRequestDTO, System.Threading.CancellationToken.None))
        {
            if (response.IsSuccessStatusCode)
            {
                // TODO: Seperate them :)
                LoginTokenResponseDTO? result = await response.Content.ReadFromJsonAsync<LoginTokenResponseDTO>();

                await localStorage.SetItemAsync("JWT", result);
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", result.Token);
                                
                nav.NavigateTo("/");
            }
            else
            {
                blazorStrap.ForwardClick("modalLoginFailed");
            }
        }  
    }
}